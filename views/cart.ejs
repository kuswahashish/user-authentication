<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cart</title>
  <!-- Include Bootstrap CSS from CDN -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Include FontAwesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <style>
    .cart-container {
      padding: 20px;
    }
    .cart-item {
      border-bottom: 1px solid #ddd;
      padding: 10px 0;
    }
    .place-order-button {
      margin-top: 20px;
    }
    .total-price {
      font-size: 1.25rem;
      font-weight: bold;
      margin-top: 10px;
    }
    .quantity-control {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .clear-cart-icon {
      cursor: pointer;
      color: red;
      font-size: 1.5rem;
    }
    .delete-icon {
      cursor: pointer;
      color: red;
      font-size: 1.5rem;
    }
    
  </style>
</head>
<body>
  <header class="header">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="home">Home</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav mr-auto">
          <!-- Users Dropdown -->
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="usersDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Users
            </a>
            <div class="dropdown-menu" aria-labelledby="usersDropdown">
              <a class="dropdown-item" href="view-users"> Users</a>
              <a class="dropdown-item" href="add-user">Add User</a>
            </div>
          </li>
          <!-- Products Dropdown -->
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="productsDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              Products
            </a>
            <div class="dropdown-menu" aria-labelledby="productsDropdown">
              <a class="dropdown-item" href="view-product"> Products</a>
              <a class="dropdown-item" href="add-product">Add Product</a>
            </div>
          </li>
        </ul>
        <a href="my-cart" class="nav-link">
          <i class="fas fa-shopping-cart cart-icon" data-count="3"></i>
        </a>
        <!-- Profile Dropdown -->
        <div class="dropdown">
          <img src="https://via.placeholder.com/40" alt="Profile" id="profileImage" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <div class="dropdown-menu dropdown-menu-right" aria-labelledby="profileImage">
            <a class="dropdown-item" href="user-profile"> Profile</a>
            <a class="dropdown-item" href="edit-profile">Edit Profile</a>
            <a class="dropdown-item" href="change-password">Change Password</a>

            <div class="dropdown-divider"></div>
            <a class="dropdown-item" href="#" id="logoutButton">Logout</a>
          </div>
        </div>
      </div>
    </nav>
  </header>

  <div class="container cart-container">
    <h1 class="text-center mb-4">Your Cart</h1>
    <button id="clearCartBtn" class="btn btn-danger">
      <i class="fas fa-trash clear-cart-icon"></i> Clear Cart
    </button>
    <div id="cartItems">
      <!-- Cart items will be dynamically added here -->
    </div>
    <div class="total-price">
      Total Price: $<span id="totalPrice">0.00</span>
    </div>
    <button class="btn btn-primary btn-block place-order-button">Place Order</button>
  </div>

  <!-- Include Bootstrap JS and dependencies -->
  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <!-- Include FontAwesome JS -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"></script>
  <!-- Include Axios -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

  <script>
    document.getElementById('logoutButton').addEventListener('click', function(event) {
      event.preventDefault();
      const token = localStorage.getItem('token'); 

      axios.get('/api/users/auth/logout', {
        headers: {
          token
        }
      })
      .then(function(response) {
        if (response.status === 200) {
          localStorage.clear();
          window.location.href = 'login';
        }
      })
      .catch(function(error) {
        console.error('Error logging out:', error);
        alert('Failed to log out. Please try again.');
      });
    });

    document.addEventListener('DOMContentLoaded', function() {
      const token = localStorage.getItem('token'); 

      axios.get('/api/cart', {
        headers: {
          token
        }
      })
      .then(response => {
        if (response.data.status === 200) {
          const cartData = response.data.data[0];
          const cartItems = cartData.items;
          const cartContainer = document.getElementById('cartItems');
          const totalPriceElement = document.getElementById('totalPrice');

          let totalPrice = 0;

          cartItems.forEach(item => {
            const itemTotalPrice = item.product_price * item.product_quantity;
            totalPrice += itemTotalPrice;

            const itemDiv = document.createElement('div');
            itemDiv.className = 'cart-item';
            itemDiv.innerHTML = `
              <h5>${item.product_name}</h5>
              <p>Description: ${item.product_description}</p>
              <p>Price: $<span class="item-price">${item.product_price}</span></p>
              <p>Total: $<span class="item-total-price">${itemTotalPrice.toFixed(2)}</span></p>
              <div class="quantity-control">
                <button class="btn btn-outline-secondary decrease-quantity" data-product-id="${item.product_id}">-</button>
                <span class="quantity">${item.product_quantity}</span>
                <button class="btn btn-outline-secondary increase-quantity" data-product-id="${item.product_id}">+</button>
              <button  class="btn btn-danger delete-item" data-product-id="${item.product_id}"">
                <i class="fas fa-trash "></i> 
              </button>  
              </div>
            `;
            cartContainer.appendChild(itemDiv);
          });

          totalPriceElement.textContent = totalPrice.toFixed(2);

          // Function to recalculate the total price
          function recalculateTotalPrice() {
            let newTotalPrice = 0;
            document.querySelectorAll('.cart-item').forEach(item => {
              const itemPrice = parseFloat(item.querySelector('.item-price').textContent);
              const quantity = parseInt(item.querySelector('.quantity').textContent);
              const itemTotalPrice = itemPrice * quantity;
              item.querySelector('.item-total-price').textContent = itemTotalPrice.toFixed(2);
              newTotalPrice += itemTotalPrice;
            });
            totalPriceElement.textContent = newTotalPrice.toFixed(2);
          }

          // Event listener for increase quantity (+)
          document.querySelectorAll('.increase-quantity').forEach(button => {
  button.addEventListener('click', async (event) => {
    const productId = event.target.getAttribute('data-product-id');
    
    // Find the price element and get the product price
    const itemElement = event.target.closest('.cart-item');
    const productPrice = parseFloat(itemElement.querySelector('.item-price').textContent);

    try {
      // Send product_id, product_quantity, and product_price in the request
      await axios.post('/api/cart', {
        product_id: productId,
        product_quantity: 1, // Increment by 1
        product_price: productPrice // Include the price
      }, {
        headers: { 'token': localStorage.getItem('token') }
      });

      // Update the quantity in the DOM
      const quantityElement = event.target.previousElementSibling;
      quantityElement.textContent = parseInt(quantityElement.textContent) + 1;

      // Recalculate the total price after the update
      recalculateTotalPrice();
    } catch (error) {
      console.error('Failed to increase product quantity:', error);
      alert('Error increasing product quantity.');
    }
  });
});


          // Event listener for decrease quantity (-)
          document.querySelectorAll('.decrease-quantity').forEach(button => {
            button.addEventListener('click', async (event) => {
              const productId = event.target.getAttribute('data-product-id');
              const quantityElement = event.target.nextElementSibling;
              const currentQuantity = parseInt(quantityElement.textContent);

              if (currentQuantity > 1) {
                try {
                  await axios.put(`/api/cart/decrease/${productId}`, {}, {
                    headers: { 'token': localStorage.getItem('token') }
                  });
                  quantityElement.textContent = currentQuantity - 1;

                  recalculateTotalPrice();
                } catch (error) {
                  console.error('Failed to decrease product quantity:', error);
                  alert('Error decreasing product quantity.');
                }
              }
            });
          });

          document.querySelectorAll('.delete-item').forEach(button => {
        button.addEventListener('click', async (event) => {
          const productId = event.target.getAttribute('data-product-id');

          if (confirm('Are you sure you want to remove this product from your cart?')) {
            try {
              await axios.put(`/api/cart/remove/${productId}`, {}, {
                headers: { token }
              });

              event.target.closest('.cart-item').remove();
              recalculateTotalPrice();
              alert('Product removed successfully!');
            } catch (error) {
              console.error('Failed to remove product:', error);
              alert('Error removing product from cart.');
            }
          }
        });
      });

        } else {
          console.error('Failed to fetch cart');
        }
      })
      .catch(error => {
        console.error('Error fetching cart:', error);
      });
    });

    document.getElementById('clearCartBtn').addEventListener('click', async () => {
      try {
        const response = await axios.delete('/api/cart', {
                    headers: { 'token': localStorage.getItem('token') }
                  });
        if (response.status === 200) {
          alert('Cart cleared successfully!');
          // Optionally, you can redirect or reload the page here
          window.location.reload();
        }
      } catch (error) {
        console.error('Error clearing cart:', error);
        alert('Failed to clear cart. Please try again.');
      }
    });
  </script>
</body>
</html>
